# Generated by Django 3.2.5 on 2021-12-11 18:09

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import movie_service.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_removed', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('photo', models.ImageField(blank=True, upload_to='users/')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ('-id',),
            },
            managers=[
                ('objects', movie_service.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CastMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='CastRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('short_name', models.CharField(max_length=8, unique=True)),
            ],
            options={
                'ordering': ('name', 'short_name'),
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('plot', models.TextField(blank=True)),
                ('released', models.DateField(blank=True, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('season', models.PositiveSmallIntegerField()),
                ('number', models.PositiveSmallIntegerField()),
                ('rating', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('characters', models.ManyToManyField(blank=True, to='movie_service.Character')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EpisodeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('A', 'Add'), ('E', 'Edit'), ('R', 'Remove')], max_length=3)),
                ('status', models.CharField(choices=[('P', 'Pending'), ('A', 'Accepted'), ('R', 'Rejected')], default='P', max_length=3)),
                ('header', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('current_episode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.episode')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('accept_episoderequest', 'Can accept Episode Request'), ('reject_episoderequest', 'Can reject Episode Request')],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Lang',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('surname', models.CharField(max_length=255)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('details', models.TextField(blank=True)),
                ('photo', models.ImageField(blank=True, upload_to='people/')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='movie_service.country')),
            ],
            options={
                'ordering': ('surname', 'name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('A', 'Add'), ('E', 'Edit'), ('R', 'Remove')], max_length=3)),
                ('status', models.CharField(choices=[('P', 'Pending'), ('A', 'Accepted'), ('R', 'Rejected')], default='P', max_length=3)),
                ('header', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('current_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.person')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('accept_personrequest', 'Can accept Person Request'), ('reject_personrequest', 'Can reject Person Request')],
            },
        ),
        migrations.CreateModel(
            name='ScraperSites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('netloc', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255, null=True)),
                ('director', models.CharField(max_length=255, null=True)),
                ('genres', models.CharField(max_length=255, null=True)),
                ('countries', models.CharField(max_length=255, null=True)),
                ('year', models.CharField(max_length=255, null=True)),
                ('release_date', models.CharField(max_length=255, null=True)),
                ('duration', models.CharField(max_length=255, null=True)),
                ('plot', models.CharField(max_length=255, null=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800, 'Year cannot be less than 1800')])),
                ('plot', models.TextField(blank=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('released', models.DateField(blank=True, null=True)),
                ('type', models.CharField(choices=[('M', 'Movie'), ('S', 'Series')], max_length=3)),
                ('seasons_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('poster', models.ImageField(blank=True, upload_to='titles/')),
                ('rating', models.DecimalField(decimal_places=1, max_digits=3, null=True)),
                ('cast_members', models.ManyToManyField(blank=True, to='movie_service.CastMember')),
                ('characters', models.ManyToManyField(blank=True, to='movie_service.Character')),
                ('countries', models.ManyToManyField(blank=True, to='movie_service.Country')),
                ('genres', models.ManyToManyField(blank=True, to='movie_service.Genre')),
                ('languages', models.ManyToManyField(blank=True, to='movie_service.Lang')),
            ],
            options={
                'ordering': ('-created', 'title'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TitleRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('A', 'Add'), ('E', 'Edit'), ('R', 'Remove')], max_length=3)),
                ('status', models.CharField(choices=[('P', 'Pending'), ('A', 'Accepted'), ('R', 'Rejected')], default='P', max_length=3)),
                ('header', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('current_title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.title')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('accept_titlerequest', 'Can accept Title Request'), ('reject_titlerequest', 'Can reject Title Request')],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_visible', models.BooleanField(default=False)),
                ('watchlist_visible', models.BooleanField(default=True)),
                ('achievements_visible', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='TitleSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800, 'Year cannot be less than 1800')])),
                ('plot', models.TextField(blank=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('released', models.DateField(blank=True, null=True)),
                ('type', models.CharField(choices=[('M', 'Movie'), ('S', 'Series')], max_length=3)),
                ('seasons_count', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('poster', models.ImageField(blank=True, upload_to='titles/')),
                ('cast_members', models.ManyToManyField(blank=True, to='movie_service.CastMember')),
                ('characters', models.ManyToManyField(blank=True, to='movie_service.Character')),
                ('countries', models.ManyToManyField(blank=True, to='movie_service.Country')),
                ('genres', models.ManyToManyField(blank=True, to='movie_service.Genre')),
                ('languages', models.ManyToManyField(blank=True, to='movie_service.Lang')),
                ('title_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='title_submission', to='movie_service.titlerequest')),
            ],
            options={
                'ordering': ('-created', 'title'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header', models.CharField(blank=True, max_length=255)),
                ('body', models.TextField(blank=True)),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1, 'Rating cannot be less than 1'), django.core.validators.MaxValueValidator(10, 'Rating cannot be greater than 10')])),
                ('is_accepted', models.BooleanField(default=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('episode', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.episode')),
                ('title', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.title')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
                'permissions': [('accept_review', 'Can accept Review'), ('reject_review', 'Can reject Review')],
            },
        ),
        migrations.CreateModel(
            name='RequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('episode_request', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.episoderequest')),
                ('moderator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('person_request', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.personrequest')),
                ('title_request', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.titlerequest')),
            ],
        ),
        migrations.CreateModel(
            name='PersonSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('surname', models.CharField(max_length=255)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('details', models.TextField(blank=True)),
                ('photo', models.ImageField(blank=True, upload_to='people/')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='movie_service.country')),
                ('person_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='person_submission', to='movie_service.personrequest')),
            ],
            options={
                'ordering': ('surname', 'name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EpisodeSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('plot', models.TextField(blank=True)),
                ('released', models.DateField(blank=True, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('season', models.PositiveSmallIntegerField()),
                ('number', models.PositiveSmallIntegerField()),
                ('characters', models.ManyToManyField(blank=True, to='movie_service.Character')),
                ('episode_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='episode_submission', to='movie_service.episoderequest')),
                ('title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_service.title')),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='episode',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_service.title'),
        ),
        migrations.AddField(
            model_name='character',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_service.person'),
        ),
        migrations.AddField(
            model_name='castmember',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_service.person'),
        ),
        migrations.AddField(
            model_name='castmember',
            name='roles',
            field=models.ManyToManyField(to='movie_service.CastRole'),
        ),
        migrations.CreateModel(
            name='ActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('details', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('log_type', models.CharField(choices=[('U', 'User log'), ('A', 'Admin log'), ('M', 'Moderator log')], max_length=3)),
                ('moderator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_logs_of_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='achievements',
            field=models.ManyToManyField(blank=True, to='movie_service.Achievement'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='settings',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='movie_service.usersettings'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='watchlist',
            field=models.ManyToManyField(blank=True, to='movie_service.Title'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('title__isnull', True), ('episode__isnull', False)), models.Q(('title__isnull', False), ('episode__isnull', True)), _connector='OR'), name='review_optional_relation'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('user', 'title'), name='unique_review_title'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('user', 'episode'), name='unique_review_episode'),
        ),
        migrations.AddConstraint(
            model_name='requestlog',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('title_request__isnull', True), ('episode_request__isnull', True), ('person_request__isnull', False)), models.Q(('title_request__isnull', True), ('episode_request__isnull', False), ('person_request__isnull', True)), models.Q(('title_request__isnull', False), ('episode_request__isnull', True), ('person_request__isnull', True)), _connector='OR'), name='request_log_optional_relation'),
        ),
        migrations.AddConstraint(
            model_name='actionlog',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('log_type', 'U'), ('user__isnull', False)), ('user__isnull', True), _connector='OR'), name='action_log_optional_relation'),
        ),
    ]
