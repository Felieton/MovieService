# Generated by Django 3.2.5 on 2021-11-24 03:47

from django.db import migrations
from django.contrib.auth.management import create_permissions


data = {
    'groups': {
        'User': 'User',
        'Moderator': 'Moderator',
        'Administrator': 'Administrator'
    },
    'model_permissions': {
        'Group': {
            'app_label': 'auth',
            'perms_by_group': {
                'User': [],
                'Moderator': [],
                'Administrator': ['view']
            }
        },
        'Achievement': {
            'User': [],
            'Moderator': [],
            'Administrator': ['view', 'add', 'change', 'delete', ]
        },
        'User': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': ['add', 'change', 'delete', ]
        },
        'Genre': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': ['add', 'change', 'delete', ]
        },
        'Lang': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': ['add', 'change', 'delete', ]
        },
        'Country': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': ['add', 'change', 'delete', ]
        },
        'Person': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': []
        },
        'PersonSubmission': {
            'User': [],
            'Moderator': ['view', ],
            'Administrator': []
        },
        'PersonRequest': {
            'User': ['add', ],
            'Moderator': ['view', 'accept', 'reject'],
            'Administrator': []
        },
        'Character': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': []
        },
        'CastRole': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': ['add', 'change', 'delete', ]
        },
        'CastMember': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': []
        },
        'Title': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': []
        },
        'TitleSubmission': {
            'User': [],
            'Moderator': ['view', ],
            'Administrator': []
        },
        'TitleRequest': {
            'User': ['add', ],
            'Moderator': ['view', 'accept', 'reject'],
            'Administrator': []
        },
        'Episode': {
            'User': ['view', ],
            'Moderator': [],
            'Administrator': []
        },
        'EpisodeSubmission': {
            'User': [],
            'Moderator': ['view', ],
            'Administrator': []
        },
        'EpisodeRequest': {
            'User': ['add', ],
            'Moderator': ['view', 'accept', 'reject'],
            'Administrator': []
        },
        'Review': {
            'User': ['view', 'add', ],
            'Moderator': ['delete', 'accept', 'reject'],
            'Administrator': []
        },
        'ActionLog': {
            'User': [],
            'Moderator': [],
            'Administrator': ['view', ]
        },
        'RequestLog': {
            'User': [],
            'Moderator': ['view', ],
            'Administrator': []
        },
    }
}


def add_perm_suffix(perm_name, model_name):
    return f'{perm_name}_{model_name.lower()}'


def get_perms_with_suffixes(perms, model_name):
    return [add_perm_suffix(perm, model_name) for perm in perms]


def get_perms_objects(perm_names, model_name, apps, app_label='movie_service'):
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ct = ContentType.objects.get_by_natural_key(app_label, model_name)
    perm_names = get_perms_with_suffixes(perm_names, model_name)
    return [
        Permission.objects.get(codename=perm, content_type=ct)
        for perm in perm_names
    ]


def migrate_permissions(apps, schema_editor):
    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, apps=apps, verbosity=0)
        app_config.models_module = None


def init_groups_and_perms(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    group_user, _ = Group.objects.get_or_create(name=data['groups']['User'])
    group_mod, _ = Group.objects.get_or_create(name=data['groups']['Moderator'])
    group_admin, _ = Group.objects.get_or_create(name=data['groups']['Administrator'])

    for model_name, params in data['model_permissions'].items():
        if params.get('app_label') is not None:
            app_label = params['app_label']
            group_perms = params['perms_by_group']
        else:
            app_label = 'movie_service'
            group_perms = params

        user_perms = get_perms_objects(
            group_perms['User'], model_name, apps, app_label
        )
        mod_perms = get_perms_objects(
            group_perms['Moderator'], model_name, apps, app_label
        ) + user_perms
        admin_perms = get_perms_objects(
            group_perms['Administrator'], model_name, apps, app_label
        ) + mod_perms

        group_user.permissions.add(*user_perms)
        group_mod.permissions.add(*mod_perms)
        group_admin.permissions.add(*admin_perms)


class Migration(migrations.Migration):

    dependencies = [
        ('movie_service', '0001_initial'),
        # ('contenttypes', '__latest__'),
        # ('auth', '__latest__'),
        # ('sites', '__latest__'),
    ]

    operations = [
        # NGL... https://stackoverflow.com/a/40092780/14467787
        migrations.RunPython(migrate_permissions),
        migrations.RunPython(init_groups_and_perms),
    ]
